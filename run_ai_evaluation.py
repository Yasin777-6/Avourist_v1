"""
AI Conversation Quality Evaluator
One AI evaluates another AI's selling skills and conversation quality
"""

import os
import sys
import django
from pathlib import Path

# Setup Django
sys.path.insert(0, str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'autouristv1.settings')
django.setup()

from colorama import init, Fore, Style
from leads.models import Lead
from decimal import Decimal

init(autoreset=True)


def print_header(text):
    """Print colored header"""
    print(f"\n{Fore.CYAN}{'='*80}")
    print(f"{Fore.CYAN}{text:^80}")
    print(f"{Fore.CYAN}{'='*80}\n")


def print_success(text):
    """Print success message"""
    print(f"{Fore.GREEN}‚úì {text}")


def print_error(text):
    """Print error message"""
    print(f"{Fore.RED}‚úó {text}")


def print_info(text):
    """Print info message"""
    print(f"{Fore.YELLOW}‚Ñπ {text}")


def create_test_scenarios():
    """Create test conversation scenarios"""
    return [
        {
            "name": "Pricing ROI Calculation",
            "client_message": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∑–∞—â–∏—Ç–∞ –ø–æ —Å—Ç.12.8?",
            "ai_response": """
üîç <b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:</b>

–°—Ç–∞—Ç—å—è: —á.1 —Å—Ç.12.8 –ö–æ–ê–ü –†–§
–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –±–µ–∑ –∑–∞—â–∏—Ç—ã:
‚Ä¢ –®—Ç—Ä–∞—Ñ: 30,000‚ÇΩ
‚Ä¢ –õ–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤: 1.5-2 –≥–æ–¥–∞
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç–∞–∫—Å–∏: ~540,000‚ÇΩ –∑–∞ 18 –º–µ—Å—è—Ü–µ–≤
‚Ä¢ –†–æ—Å—Ç –û–°–ê–ì–û: +25,000‚ÇΩ

<b>üí∞ –†–∞—Å—á–µ—Ç –≤—ã–≥–æ–¥—ã —Å —é—Ä–∏—Å—Ç–æ–º:</b>

–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã: 30,000‚ÇΩ
–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: 75%
–û–∂–∏–¥–∞–µ–º–∞—è —ç–∫–æ–Ω–æ–º–∏—è: 421,250‚ÇΩ

<b>–ó–∞—â–∏—Ç–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è –≤ 14 —Ä–∞–∑!</b>

–ë–µ—Ä–µ–º –≤–∞—à–µ –¥–µ–ª–æ? –û—Ñ–æ—Ä–º–∏–º –¥–æ–≥–æ–≤–æ—Ä –∑–∞ 5 –º–∏–Ω—É—Ç.
""",
            "case_type": "DUI",
            "region": "MOSCOW",
            "status": "WARM"
        },
        {
            "name": "Urgent Case Handling",
            "client_message": "–°—É–¥ –∑–∞–≤—Ç—Ä–∞! –ü–æ–º–æ–≥–∏—Ç–µ —Å—Ä–æ—á–Ω–æ!",
            "ai_response": """
‚ö†Ô∏è <b>–°–†–û–ß–ù–û–ï –î–ï–õ–û!</b>

–°—É–¥ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 ‚Äî –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ!

<b>–ß—Ç–æ –¥–µ–ª–∞–µ–º –°–ï–ô–ß–ê–°:</b>
1. –•–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—É–¥–∞ (–≥–æ—Ç–æ–≤–æ –∑–∞ 2 —á–∞—Å–∞)
2. –ë–∞–∑–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è
3. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–∏–Ω–∏–∏ –∑–∞—â–∏—Ç—ã

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: 35,000‚ÇΩ</b>
(–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ 30,000‚ÇΩ + 5,000‚ÇΩ —Å—Ä–æ—á–Ω–æ—Å—Ç—å)

–ë–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—É–¥–∞ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ 1.5-2 –≥–æ–¥–∞!

<b>–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b> –ö–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ —Å—á–µ—Ç—É.
""",
            "case_type": "DUI",
            "region": "MOSCOW",
            "status": "HOT"
        },
        {
            "name": "Empathy & Professionalism",
            "client_message": "–ú–µ–Ω—è –ª–∏—à–∞—é—Ç –ø—Ä–∞–≤, —è –≤ –æ—Ç—á–∞—è–Ω–∏–∏...",
            "ai_response": """
–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –õ–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤ ‚Äî —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω—ã–π —É–¥–∞—Ä –ø–æ –∂–∏–∑–Ω–∏.

<b>–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:</b>

–í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —á.1 —Å—Ç.12.8 –ö–æ–ê–ü –†–§. –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç –∑–∞—â–∏—Ç—ã –ø–æ —Ç–∞–∫–∏–º –¥–µ–ª–∞–º.

<b>–ß—Ç–æ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
‚Ä¢ 73% –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –ø—Ä–∞–≤–∞
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∑–∞—â–∏—Ç—ã: 2-3 –º–µ—Å—è—Ü–∞
‚Ä¢ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏

<b>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚úì –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚úì –û–ø–ª–∞—Ç–∞ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É (50% —Å–µ–π—á–∞—Å, 50% –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è)
‚úì –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ–º

–ì–æ—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏?
""",
            "case_type": "DUI",
            "region": "REGIONS",
            "status": "WARM"
        },
        {
            "name": "Contract Closing",
            "client_message": "–î–∞, –¥–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –¥–æ–≥–æ–≤–æ—Ä",
            "ai_response": """
–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ —á—Ç–æ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∞.

<b>–î–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω—É–∂–Ω—ã:</b>
1. –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é
2. –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞
3. –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
4. –¢–µ–ª–µ—Ñ–æ–Ω

<b>–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 15,000‚ÇΩ (50%)
‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: 15,000‚ÇΩ (50%)

<b>–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚úì –î–æ–≥–æ–≤–æ—Ä –Ω–∞ email –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞
‚úì –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–µ–≥–æ–¥–Ω—è
‚úì –õ–∏—á–Ω—ã–π —é—Ä–∏—Å—Ç –Ω–∞ —Å–≤—è–∑–∏ 24/7

–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ñ–æ—Ä–º–ª—é –¥–æ–≥–æ–≤–æ—Ä!
""",
            "case_type": "DUI",
            "region": "MOSCOW",
            "status": "HOT"
        }
    ]


def evaluate_with_real_ai():
    """Evaluate conversations using real DeepSeek API"""
    from ai_engine.services.deepseek import DeepSeekAPIService
    from tests.test_ai_conversation_quality import AIEvaluator
    
    print_header("AI CONVERSATION QUALITY EVALUATION")
    print_info("One AI evaluates another AI's selling skills\n")
    
    # Initialize services
    deepseek = DeepSeekAPIService()
    evaluator = AIEvaluator(deepseek)
    
    scenarios = create_test_scenarios()
    
    all_scores = []
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{Fore.CYAN}{'‚îÄ'*80}")
        print(f"{Fore.CYAN}Scenario {i}/{len(scenarios)}: {scenario['name']}")
        print(f"{Fore.CYAN}{'‚îÄ'*80}\n")
        
        print(f"{Fore.YELLOW}Client: {scenario['client_message']}\n")
        print(f"{Fore.GREEN}AI Bot Response:")
        print(scenario['ai_response'])
        
        print(f"\n{Fore.MAGENTA}ü§ñ AI Evaluator is analyzing...\n")
        
        try:
            # Get evaluation from AI
            evaluation = evaluator.evaluate_conversation(
                client_message=scenario['client_message'],
                ai_response=scenario['ai_response'],
                case_type=scenario['case_type'],
                region=scenario['region'],
                status=scenario['status']
            )
            
            # Display results
            score = evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']
            all_scores.append(score)
            
            # Color code based on score
            if score >= 9:
                score_color = Fore.GREEN
            elif score >= 7:
                score_color = Fore.YELLOW
            else:
                score_color = Fore.RED
            
            print(f"{score_color}{'='*80}")
            print(f"{score_color}EVALUATION RESULTS")
            print(f"{score_color}{'='*80}\n")
            
            print(f"{Fore.WHITE}Overall Score: {score_color}{score}/10\n")
            
            print(f"{Fore.WHITE}Detailed Scores:")
            print(f"  –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {evaluation.get('—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'N/A')}/10")
            print(f"  –≠–º–ø–∞—Ç–∏—è: {evaluation.get('—ç–º–ø–∞—Ç–∏—è', 'N/A')}/10")
            print(f"  –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º: {evaluation.get('–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º', 'N/A')}/10")
            print(f"  –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: {evaluation.get('–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é', 'N/A')}/10")
            print(f"  –†–∞—Å—á–µ—Ç ROI: {evaluation.get('—Ä–∞—Å—á–µ—Ç_roi', 'N/A')}/10")
            
            print(f"\n{Fore.GREEN}–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:")
            for strength in evaluation.get('—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã', []):
                print(f"  ‚úì {strength}")
            
            print(f"\n{Fore.RED}–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:")
            for weakness in evaluation.get('—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã', []):
                print(f"  ‚úó {weakness}")
            
            print(f"\n{Fore.CYAN}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print(f"  {evaluation.get('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'N/A')}")
            
            print(f"\n{score_color}{'='*80}\n")
            
        except Exception as e:
            print_error(f"Error evaluating scenario: {e}")
            continue
    
    # Final summary
    if all_scores:
        avg_score = sum(all_scores) / len(all_scores)
        
        print_header("FINAL EVALUATION SUMMARY")
        
        print(f"\n{Fore.WHITE}Scenarios Evaluated: {len(all_scores)}")
        print(f"{Fore.WHITE}Average Score: {Fore.CYAN}{avg_score:.2f}/10\n")
        
        if avg_score >= 9:
            print_success("EXCELLENT! AI selling skills are top-tier")
        elif avg_score >= 8:
            print_success("GREAT! AI selling skills are strong")
        elif avg_score >= 7:
            print_info("GOOD! AI selling skills are acceptable")
        else:
            print_error("NEEDS IMPROVEMENT! AI selling skills need work")
        
        print(f"\n{Fore.WHITE}Individual Scores:")
        for i, (scenario, score) in enumerate(zip(scenarios, all_scores), 1):
            score_emoji = "üü¢" if score >= 9 else "üü°" if score >= 7 else "üî¥"
            print(f"  {score_emoji} {scenario['name']}: {score}/10")
        
        print(f"\n{Fore.CYAN}{'='*80}\n")
        
        return avg_score >= 8.0
    
    return False


def run_mock_evaluation():
    """Run evaluation with mock data (for testing without API)"""
    print_header("AI CONVERSATION QUALITY EVALUATION (MOCK)")
    print_info("Running with mock data for testing\n")
    
    scenarios = create_test_scenarios()
    
    # Mock scores
    mock_scores = [9.2, 8.8, 8.6, 9.0]
    
    for i, (scenario, score) in enumerate(zip(scenarios, mock_scores), 1):
        print(f"\n{Fore.CYAN}Scenario {i}: {scenario['name']}")
        print(f"{Fore.WHITE}Score: {Fore.GREEN}{score}/10")
    
    avg_score = sum(mock_scores) / len(mock_scores)
    
    print(f"\n{Fore.CYAN}{'='*80}")
    print(f"{Fore.WHITE}Average Score: {Fore.GREEN}{avg_score:.2f}/10")
    print(f"{Fore.CYAN}{'='*80}\n")
    
    print_success("Mock evaluation complete!")
    
    return True


if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='Evaluate AI conversation quality')
    parser.add_argument('--mock', action='store_true', help='Run with mock data (no API calls)')
    parser.add_argument('--api-key', help='DeepSeek API key (or set DEEPSEEK_API_KEY env var)')
    
    args = parser.parse_args()
    
    if args.api_key:
        os.environ['DEEPSEEK_API_KEY'] = args.api_key
    
    try:
        if args.mock:
            success = run_mock_evaluation()
        else:
            # Check if API key is set
            if not os.environ.get('DEEPSEEK_API_KEY'):
                print_error("DEEPSEEK_API_KEY not set!")
                print_info("Set it in .env file or use --api-key argument")
                print_info("Or run with --mock for testing without API")
                sys.exit(1)
            
            success = evaluate_with_real_ai()
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print_info("\n\nEvaluation interrupted by user")
        sys.exit(1)
    except Exception as e:
        print_error(f"\nError: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
