"""
Celery tasks for contract_manager app and lead follow-up
"""
import logging
from celery import shared_task
from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
from datetime import timedelta

logger = logging.getLogger(__name__)


@shared_task(bind=True, max_retries=3, default_retry_delay=60)
def send_verification_email_task(self, email: str, code: str, contract_number: str):
    """
    Async task to send verification code via email
    
    Args:
        email: Recipient email address
        code: Verification code
        contract_number: Contract number for reference
    """
    logger.info(f"=== EMAIL TASK STARTED ===")
    logger.info(f"Task ID: {self.request.id}")
    logger.info(f"Recipient: {email}")
    logger.info(f"Contract: {contract_number}")
    logger.info(f"Code: {code}")
    
    if not email:
        logger.warning(f"No email address for contract {contract_number}")
        return
    
    subject = f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ {contract_number}"
    message = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞: {code}

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ Telegram-–±–æ—Ç–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞.

---
–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –ê–≤—Ç–æ–Æ—Ä–∏—Å—Ç
    """.strip()
    
    try:
        logger.info(f"Sending email from {settings.DEFAULT_FROM_EMAIL} to {email}")
        logger.info(f"Email backend: {settings.EMAIL_BACKEND}")
        logger.info(f"Email host: {settings.EMAIL_HOST}:{settings.EMAIL_PORT}")
        
        send_mail(
            subject=subject,
            message=message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[email],
            fail_silently=False,
        )
        logger.info(f"‚úÖ Verification code sent successfully to {email}")
        return f"Email sent successfully to {email}"
    except Exception as e:
        logger.error(f"‚ùå Failed to send email to {email}: {e}")
        logger.exception("Full traceback:")
        # Retry the task
        raise self.retry(exc=e)


@shared_task
def send_follow_up_message_task(telegram_id: int, lead_id: int):
    """
    Send follow-up message to inactive leads after 1 hour
    
    Args:
        telegram_id: Telegram user ID
        lead_id: Lead ID
    """
    from leads.models import Lead
    from ai_engine.services.conversation import ConversationService
    import requests
    
    logger.info(f"=== FOLLOW-UP TASK STARTED ===")
    logger.info(f"Telegram ID: {telegram_id}, Lead ID: {lead_id}")
    
    try:
        lead = Lead.objects.get(id=lead_id, telegram_id=telegram_id)
        
        # Check if lead has responded in the last hour using Redis
        from ai_engine.services.memory import ConversationMemoryService
        memory_service = ConversationMemoryService()
        
        # Check last interaction timestamp from Redis
        last_interaction = memory_service.get_last_interaction(telegram_id)
        
        if last_interaction:
            # If client interacted in the last hour, don't send follow-up
            one_hour_ago = timezone.now() - timedelta(hours=1)
            if last_interaction.replace(tzinfo=None) > one_hour_ago.replace(tzinfo=None):
                logger.info(f"Lead {lead_id} interacted recently, skipping follow-up")
                return
        
        # Check if we already sent a follow-up
        follow_up_key = f"follow_up_sent:{telegram_id}"
        if memory_service.redis_client.get(follow_up_key):
            logger.info(f"Follow-up already sent to {telegram_id}, skipping")
            return
        
        # Mark that we're sending a follow-up (prevent duplicates)
        memory_service.redis_client.setex(follow_up_key, 3600 * 24, "1")  # 24 hours
        
        # Determine follow-up message based on lead status
        follow_up_messages = {
            'NEW': """–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤—Å–µ –µ—â–µ –∑–¥–µ—Å—å –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.

<b>–ú–æ–≥—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ:</b>
‚Ä¢ üìä –û—Ü–µ–Ω–∏—Ç—å –≤–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
‚Ä¢ üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –æ–± –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–∏ —Å –¥–µ–ª–æ–º (—Ñ–∞–π–ª .docx)
‚Ä¢ üéØ –ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –≤–∞—à–µ–º –¥–µ–ª–µ
‚Ä¢ ‚öñÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª –ø–æ –≤–∞—à–µ–π —Å—Ç–∞—Ç—å–µ

<b>–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é</b> ‚Äî —è –¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–æ–∫—É–º–µ–Ω—Ç—ã.""",
            
            'WARM': """‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞—é:</b> —É –≤–∞—Å –≤—Å–µ–≥–æ 10 –¥–Ω–µ–π –Ω–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ!

<b>–î–∞–≤–∞–π—Ç–µ —è –ø–æ–º–æ–≥—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (–±–µ—Å–ø–ª–∞—Ç–Ω–æ):</b>
‚Ä¢ üìä –û—Ü–µ–Ω—é –≤–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
‚Ä¢ üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –æ–± –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –¥–µ–ª–∞ (—Ñ–∞–π–ª .docx)
‚Ä¢ üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ (—Ñ–∞–π–ª .docx)
‚Ä¢ üéØ –ù–∞–π–¥—É –Ω–∞—Ä—É—à–µ–Ω–∏—è –ì–ò–ë–î–î –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ

<b>–î–ª—è —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ 3 –≤–µ—â–∏:</b>
‚Ä¢ –í–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –ì–æ—Ä–æ–¥ (–≥–¥–µ –±—ã–ª–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ)

–ù–∞–ø–∏—à–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —è —Å—Ä–∞–∑—É –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx.""",
            
            'HOT': """üéØ <b>–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>

<b>–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ:</b>
‚Ä¢ üìä –û—Ü–µ–Ω–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö) ‚Äî –ø–æ–∫–∞–∂—É —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –¥–ª—è —Å—É–¥–∞ (—Ñ–∞–π–ª .docx) ‚Äî –≥–æ—Ç–æ–≤–æ –∑–∞ 1 –º–∏–Ω—É—Ç—É
‚Ä¢ üéØ –ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∂—É –≤—Å–µ –∑–∞—Ü–µ–ø–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã
‚Ä¢ ‚öñÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª ‚Äî —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã

<b>–î–ª—è —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ 3 –≤–µ—â–∏:</b>
‚Ä¢ –í–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –ì–æ—Ä–æ–¥ (–≥–¥–µ –±—ã–ª–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ)

–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –≥. –ú–æ—Å–∫–≤–∞ —É–ª. –õ–µ–Ω–∏–Ω–∞ 10, –ú–æ—Å–∫–≤–∞"""
        }
        
        message = follow_up_messages.get(lead.status, follow_up_messages['NEW'])
        
        # Send message via Telegram
        bot_token = settings.TELEGRAM_BOT_TOKEN
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        response = requests.post(url, json={
            'chat_id': telegram_id,
            'text': message,
            'parse_mode': 'HTML'
        })
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Follow-up message sent to {telegram_id}")
            
            # Update lead's last_contact
            lead.last_contact = timezone.now()
            lead.save()
        else:
            logger.error(f"‚ùå Failed to send follow-up: {response.text}")
            
    except Lead.DoesNotExist:
        logger.error(f"Lead {lead_id} not found")
    except Exception as e:
        logger.error(f"Error in follow-up task: {e}")
        logger.exception("Full traceback:")
