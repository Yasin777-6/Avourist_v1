"""
Celery tasks for contract_manager app and lead follow-up
"""
import logging
from celery import shared_task
from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
from datetime import timedelta

logger = logging.getLogger(__name__)


@shared_task(bind=True, max_retries=3, default_retry_delay=60)
def send_verification_email_task(self, email: str, code: str, contract_number: str):
    """
    Async task to send verification code via email
    
    Args:
        email: Recipient email address
        code: Verification code
        contract_number: Contract number for reference
    """
    logger.info(f"=== EMAIL TASK STARTED ===")
    logger.info(f"Task ID: {self.request.id}")
    logger.info(f"Recipient: {email}")
    logger.info(f"Contract: {contract_number}")
    logger.info(f"Code: {code}")
    
    if not email:
        logger.warning(f"No email address for contract {contract_number}")
        return
    
    subject = f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ {contract_number}"
    message = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞: {code}

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ Telegram-–±–æ—Ç–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞.

---
–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –ê–≤—Ç–æ–Æ—Ä–∏—Å—Ç
    """.strip()
    
    try:
        logger.info(f"Sending email from {settings.DEFAULT_FROM_EMAIL} to {email}")
        logger.info(f"Email backend: {settings.EMAIL_BACKEND}")
        logger.info(f"Email host: {settings.EMAIL_HOST}:{settings.EMAIL_PORT}")
        
        send_mail(
            subject=subject,
            message=message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[email],
            fail_silently=False,
        )
        logger.info(f"‚úÖ Verification code sent successfully to {email}")
        return f"Email sent successfully to {email}"
    except Exception as e:
        logger.error(f"‚ùå Failed to send email to {email}: {e}")
        logger.exception("Full traceback:")
        # Retry the task
        raise self.retry(exc=e)


@shared_task
def send_follow_up_message_task(telegram_id: int, lead_id: int):
    """
    Send follow-up message to inactive leads after 1 hour
    
    Args:
        telegram_id: Telegram user ID
        lead_id: Lead ID
    """
    from leads.models import Lead
    from ai_engine.services.conversation import ConversationService
    import requests
    
    logger.info(f"=== FOLLOW-UP TASK STARTED ===")
    logger.info(f"Telegram ID: {telegram_id}, Lead ID: {lead_id}")
    
    try:
        lead = Lead.objects.get(id=lead_id, telegram_id=telegram_id)
        
        # Check if lead has responded in the last hour
        one_hour_ago = timezone.now() - timedelta(hours=1)
        
        # Get conversation history
        conversation_service = ConversationService()
        history = conversation_service._get_conversation_history(lead)
        
        if not history:
            logger.info(f"No conversation history for lead {lead_id}")
            return
        
        # Check last message timestamp
        last_message = history[-1]
        if 'timestamp' in last_message:
            # If client responded recently, don't send follow-up
            return
        
        # Determine follow-up message based on lead status
        follow_up_messages = {
            'NEW': """–ü–æ–Ω–∏–º–∞—é üòä –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é ‚Äî –º–æ–≥—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–º–æ—á—å:

<b>–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>
‚Ä¢ –ù–∞–π—Ç–∏ –≤–∞—à–µ –¥–µ–ª–æ –≤ –±–∞–∑–µ —Å—É–¥–∞
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å —à–∞–Ω—Å—ã –ø–æ –±–∞–∑–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª

<b>–•–æ—Ç–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?</b> –û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, —é—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.""",
            
            'WARM': """–ù–∞–ø–æ–º–∏–Ω–∞—é ‚Äî —É –≤–∞—Å –≤—Å–µ–≥–æ 10 –¥–Ω–µ–π –Ω–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ‚è∞

<b>–ú–æ–≥—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å:</b>
‚Ä¢ –•–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –Ω–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ–ª–æ–º
‚Ä¢ –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—É–¥–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —à–∞–Ω—Å–æ–≤ –ø–æ –≤–∞—à–µ–π —Å—Ç–∞—Ç—å–µ

<b>–ù–µ —Ç–µ—Ä—è–π—Ç–µ –≤—Ä–µ–º—è!</b> –û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, –∏ —é—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è.""",
            
            'HOT': """–í–∏–∂—É, –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ –∑–∞—â–∏—Ç–µ —Å–≤–æ–∏—Ö –ø—Ä–∞–≤ üëç

<b>–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>
‚Ä¢ –ü–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä—ã –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ
‚Ä¢ –î–∞–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏

<b>–û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω</b> ‚Äî —é—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è –∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∞."""
        }
        
        message = follow_up_messages.get(lead.status, follow_up_messages['NEW'])
        
        # Send message via Telegram
        bot_token = settings.TELEGRAM_BOT_TOKEN
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        response = requests.post(url, json={
            'chat_id': telegram_id,
            'text': message,
            'parse_mode': 'HTML'
        })
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Follow-up message sent to {telegram_id}")
            
            # Update lead's last_contact
            lead.last_contact = timezone.now()
            lead.save()
        else:
            logger.error(f"‚ùå Failed to send follow-up: {response.text}")
            
    except Lead.DoesNotExist:
        logger.error(f"Lead {lead_id} not found")
    except Exception as e:
        logger.error(f"Error in follow-up task: {e}")
        logger.exception("Full traceback:")
