import logging
import re
from datetime import datetime
from typing import Dict

import requests
from django.conf import settings

from contract_manager.models import Contract
from contract_manager.services import ContractGenerationService, SMSVerificationService

logger = logging.getLogger(__name__)


class ContractFlow:
    """Handles contract generation and SMS verification flow"""

    def __init__(self):
        self.contract_service = ContractGenerationService()
        self.sms_service = SMSVerificationService()

    def handle_contract_generation(self, lead, client_data):
        try:
            if isinstance(client_data, str):
                data_str = client_data.strip()
                if not data_str or data_str.upper() in {"RESEND", "REPEAT", "SEND_AGAIN"}:
                    existing_contract = Contract.objects.filter(lead=lead).order_by("-created_at").first()
                    if existing_contract:
                        self._send_contract_to_telegram(lead.telegram_id, existing_contract)
                        return (
                            "  –Ø –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–≥–æ–≤–æ—Ä –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ email –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è."
                        )
                    return (
                        "–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–Ω–æ–≤–æ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω."
                    )
                parsed_data = self._parse_contract_data(lead, data_str)
            else:
                parsed_data = client_data if isinstance(client_data, dict) else None
            if not parsed_data:
                return (
                    "–ù–µ —Å–º–æ–≥ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞. –£–∫–∞–∂–∏—Ç–µ –§–ò–û, —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞, –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."
                )

            logger.info(
                f"Generating contract with data: {parsed_data} | lead.region={lead.region} | lead.case_type={lead.case_type}"
            )
            logger.info(
                f"Contract parameters: instance={parsed_data.get('instance', '1')}, "
                f"representation={parsed_data.get('representation_type', 'WITHOUT_POA')}, "
                f"region={lead.region or 'REGIONS'}"
            )
            contract = self.contract_service.generate_contract(lead, parsed_data)
            logger.info(f"Contract generated: {contract.contract_number}")

            self._send_contract_to_telegram(lead.telegram_id, contract)
            try:
                pdf_path = getattr(contract.generated_pdf, "path", None)
                logger.info(f"Contract PDF path: {pdf_path}")
            except Exception:
                logger.warning("Could not read contract PDF path")

            self.sms_service.generate_verification_code(contract)
            contract.status = "SMS_SENT"
            contract.save()

            return (
                f"""  –î–æ–≥–æ–≤–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç!

            –ù–æ–º–µ—Ä: {contract.contract_number}
            –°—Ç–æ–∏–º–æ—Å—Ç—å: {int(contract.template.base_cost):,} —Ä—É–±

            <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É</b>

            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞."""
            )
        except Exception:
            logger.exception("Contract generation error")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."

    def _send_contract_to_telegram(self, telegram_id: int, contract):
        try:
            file_field = contract.generated_pdf
            if file_field and getattr(file_field, "path", None):
                url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendDocument"
                with open(file_field.path, "rb") as file:
                    files = {"document": file}
                    data = {
                        "chat_id": telegram_id,
                        "caption": f"üìÑ –î–æ–≥–æ–≤–æ—Ä ‚Ññ{contract.contract_number}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ email –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è.",
                        "parse_mode": "HTML",
                    }
                    response = requests.post(url, data=data, files=files, timeout=30)
                    response.raise_for_status()
                    logger.info(f"Contract sent to {telegram_id}")
            else:
                logger.error("No generated PDF available to send for this contract")
        except Exception as e:
            logger.error(f"Failed to send contract file: {str(e)}")

    def _parse_contract_data(self, lead, data_str: str) -> Dict:
        contract_data: Dict = {
            # Client basic info
            "client_full_name": f"{(lead.first_name or '').strip()} {(lead.last_name or '').strip()}".strip()
            or "–ö–ª–∏–µ–Ω—Ç",
            
            # Passport details
            "client_passport_series": "",
            "client_passport_number": "",
            "client_passport_issued_by": "",
            "client_passport_issued_date": "",
            
            # Personal details
            "birth_date": "",
            "birth_place": "",
            "client_address": "",
            "client_phone": "",
            "email": lead.email or "",
            
            # Case details
            "case_article": "",
            "case_description": (lead.case_description or "").strip(),
            
            # Pricing (will be calculated from template or parsed from AI)
            "total_amount": None,
            "prepayment": None,
            "prepayment_percent": None,  # e.g., 25 for 25%
            "success_fee": None,
            "success_fee_percent": None,  # e.g., 75 for 75%
            "docs_prep_fee": 5000,  # Default docs preparation fee
            "payment_terms": "",  # Custom payment terms description
            
            # Contract metadata
            "contract_date": datetime.now().strftime("%d.%m.%Y"),
            "instance": "1",
            "representation_type": "WITHOUT_POA",
            "director_name": "–®–µ–ª—å–º–∏–Ω–∞ –ï–≤–≥–µ–Ω–∏—è –í–∞—Å–∏–ª—å–µ–≤–∏—á–∞",  # Default director
        }

        # Parse phone number (multiple patterns)
        phone_match = re.search(r"(?:—Ç–µ–ª–µ—Ñ–æ–Ω|—Ç–µ–ª\.?|–Ω–æ–º–µ—Ä)[:\s-]*(\+?7[\s-]?\d[\d\s-]{8,})", data_str, re.IGNORECASE)
        if not phone_match:
            phone_match = re.search(r"(\+?7[\s-]?\d{3}[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2})", data_str)
        if phone_match:
            contract_data["client_phone"] = re.sub(r"\s+", " ", phone_match.group(1)).strip()
        # Save phone to lead
        if contract_data["client_phone"] and not lead.phone_number:
            lead.phone_number = contract_data["client_phone"]
            lead.save()

        # Parse passport series and number (handles both orders)
        # Try "—Å–µ—Ä–∏—è XXXX –Ω–æ–º–µ—Ä XXXXXX"
        pass_match = re.search(
            r"(?:—Å–µ—Ä–∏—è\s*)(\d{4,6})[\s-]*(?:–Ω–æ–º–µ—Ä\s*)?(\d{4,6})", data_str, re.IGNORECASE
        )
        if pass_match:
            # Determine which is series (4 digits) and which is number (6 digits)
            first = pass_match.group(1)
            second = pass_match.group(2)
            if len(first) == 4 and len(second) == 6:
                contract_data["client_passport_series"] = first
                contract_data["client_passport_number"] = second
            elif len(first) == 6 and len(second) == 4:
                contract_data["client_passport_series"] = second
                contract_data["client_passport_number"] = first
        else:
            # Try "–Ω–æ–º–µ—Ä XXXXXX —Å–µ—Ä–∏—è XXXX" (reversed)
            pass_match_rev = re.search(
                r"(?:–Ω–æ–º–µ—Ä\s*(?:–ø–∞—Å—Å–ø–æ—Ä—Ç–∞\s*)?)(\d{4,6})[\s-]*(?:—Å–µ—Ä–∏—è\s*)?(\d{4,6})", data_str, re.IGNORECASE
            )
            if pass_match_rev:
                first = pass_match_rev.group(1)
                second = pass_match_rev.group(2)
                if len(first) == 6 and len(second) == 4:
                    contract_data["client_passport_number"] = first
                    contract_data["client_passport_series"] = second
                elif len(first) == 4 and len(second) == 6:
                    contract_data["client_passport_series"] = first
                    contract_data["client_passport_number"] = second

        # Parse birth date (DD.MM.YYYY or DD/MM/YYYY)
        birth_date_match = re.search(r"(\d{2}[./]\d{2}[./]\d{4})", data_str)
        if birth_date_match:
            contract_data["birth_date"] = birth_date_match.group(1).replace("/", ".")
        
        # Parse birth place
        birth_place_match = re.search(r"(?:–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è|—Ä–æ–¥–∏–ª—Å—è)[:\s-]*(–≥\.\s*[^\n,;]+|[–ê-–Ø–Å][–∞-—è—ë]+)", data_str, re.IGNORECASE)
        if birth_place_match:
            contract_data["birth_place"] = birth_place_match.group(1).strip()

        # Parse address
        addr_match = re.search(r"–∞–¥—Ä–µ—Å[:\s-]*([^\n]+)", data_str, re.IGNORECASE)
        if addr_match:
            contract_data["client_address"] = addr_match.group(1).strip()
        else:
            msk_match = re.search(r"(–≥\.\s*–ú–æ—Å–∫–≤–∞[^\n,;]*)", data_str, re.IGNORECASE)
            if msk_match:
                contract_data["client_address"] = msk_match.group(1).strip()

        # Parse full name
        name_match = re.search(
            r"([–ê-–ØA-Z–Å][–∞-—èa-z—ë]+\s+[–ê-–ØA-Z–Å][–∞-—èa-z—ë]+(?:\s+[–ê-–ØA-Z–Å][–∞-—èa-z—ë]+)?)",
            data_str,
        )
        if name_match:
            contract_data["client_full_name"] = name_match.group(1).strip()
        
        # Parse email
        email_match = re.search(r"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})", data_str)
        if email_match:
            email = email_match.group(1).strip()
            contract_data["email"] = email
            # Save email to lead for future use
            if not lead.email:
                lead.email = email
                lead.save()
        
        # Parse instance (1, 2, 3, or 4)
        instance_match = re.search(r"(?:–∏–Ω—Å—Ç–∞–Ω—Ü–∏—è|inst)[:\s-]*(\d)", data_str, re.IGNORECASE)
        if instance_match:
            contract_data["instance"] = instance_match.group(1)
        else:
            # Try to detect from keywords
            if re.search(r"–∞–ø–µ–ª–ª—è—Ü–∏", data_str, re.IGNORECASE):
                contract_data["instance"] = "2"
            elif re.search(r"–∫–∞—Å—Å–∞—Ü–∏", data_str, re.IGNORECASE):
                contract_data["instance"] = "3"
            elif re.search(r"–Ω–∞–¥–∑–æ—Ä", data_str, re.IGNORECASE):
                contract_data["instance"] = "4"
        
        # Parse representation type (WITH_POA or WITHOUT_POA)
        if re.search(r"(?:–ø–æ|—Å)\s*–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç", data_str, re.IGNORECASE):
            contract_data["representation_type"] = "WITH_POA"
        elif re.search(r"–±–µ–∑\s*–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç", data_str, re.IGNORECASE):
            contract_data["representation_type"] = "WITHOUT_POA"
        # Also check for explicit markers from AI
        if "–ü–û_–î–û–í–ï–†–ï–ù–ù–û–°–¢–ò" in data_str.upper():
            contract_data["representation_type"] = "WITH_POA"
        elif "–ë–ï–ó_–î–û–í–ï–†–ï–ù–ù–û–°–¢–ò" in data_str.upper():
            contract_data["representation_type"] = "WITHOUT_POA"
        
        # Parse custom payment terms (e.g., "25% —Å–µ–π—á–∞—Å, 75% –ø–æ—Å–ª–µ")
        payment_match = re.search(r"(\d+)%\s*(?:—Å–µ–π—á–∞—Å|–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞)[,\s]+(\d+)%\s*(?:–ø–æ—Å–ª–µ|—É—Å–ø–µ—Ö)", data_str, re.IGNORECASE)
        if payment_match:
            contract_data["prepayment_percent"] = int(payment_match.group(1))
            contract_data["success_fee_percent"] = int(payment_match.group(2))
            contract_data["payment_terms"] = f"{payment_match.group(1)}% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, {payment_match.group(2)}% –ø–æ—Å–ª–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"

        # Try to extract article from conversation data first
        # Matches: "—á. 2 —Å—Ç. 12.8 –ö–æ–ê–ü" or "—Å—Ç. 12.8 –ö–æ–ê–ü"
        article_match = re.search(r"(?:—á\.\s*(\d+)\s+)?—Å—Ç\.\s*(\d+\.?\d*)\s*–ö–æ–ê–ü", data_str, re.IGNORECASE)
        if article_match:
            part = article_match.group(1)  # Part number (e.g., "2")
            article = article_match.group(2)  # Article number (e.g., "12.8")
            if part:
                contract_data["case_article"] = f"—á.{part} —Å—Ç. {article} –ö–æ–ê–ü –†–§"
            else:
                contract_data["case_article"] = f"—Å—Ç. {article} –ö–æ–ê–ü –†–§"
        else:
            # Fallback to case_type mapping
            case_map = {
                "DUI": "—á.1 —Å—Ç. 12.8 –ö–æ–ê–ü –†–§",
                "SPEEDING": "—Å—Ç. 12.9 –ö–æ–ê–ü –†–§",
                "LICENSE_SUSPENSION": "—Å—Ç. 12.7 –ö–æ–ê–ü –†–§",
                "ACCIDENT": "—Å—Ç. 12.27 –ö–æ–ê–ü –†–§",
                "PARKING": "—Å—Ç. 12.19 –ö–æ–ê–ü –†–§",
                "OTHER": "–ö–æ–ê–ü –†–§",
            }
            contract_data["case_article"] = case_map.get(getattr(lead, "case_type", "OTHER") or "OTHER", "–ö–æ–ê–ü –†–§")

        if not contract_data["case_description"]:
            contract_data["case_description"] = data_str[:500]

        return contract_data

    def handle_email_code(self, lead):
        """Resend verification code via email"""
        try:
            contract = Contract.objects.filter(lead=lead).order_by("-created_at").first()
            if contract:
                self.sms_service.generate_verification_code(contract)
                contract.status = "SMS_SENT"
                contract.save()
                return "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞."
            return "–ù–µ –Ω–∞—à—ë–ª –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞. –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –¥–æ–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ."
        except Exception as e:
            logger.error(f"Email code error: {str(e)}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."

    def handle_code_verification(self, lead, code: str) -> str:
        """Verify entered code"""
        try:
            contract = Contract.objects.filter(lead=lead).order_by("-created_at").first()
            if contract and self.sms_service.verify_code(contract, code):
                return (
                    "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω. –ù–∞—à —é—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç –∫ —Ä–∞–±–æ—Ç–µ –ø–æ –≤–∞—à–µ–º—É –¥–µ–ª—É."
                )
            else:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
        except Exception as e:
            logger.error(f"Code verification error: {str(e)}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    
    # Backward compatibility aliases
    handle_sms_code = handle_email_code
    handle_sms_verification = handle_code_verification
