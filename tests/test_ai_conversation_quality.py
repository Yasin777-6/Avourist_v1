"""
AI Conversation Quality Tests
One AI evaluates another AI's selling skills, persuasion, and content quality
"""

import pytest
from unittest.mock import Mock, patch
from decimal import Decimal

from leads.models import Lead, Conversation
from ai_engine.agents.orchestrator import AgentOrchestrator
from ai_engine.agents.pricing_agent import PricingAgent
from ai_engine.agents.contract_agent import ContractAgent


class AIEvaluator:
    """AI that evaluates other AI's conversation quality"""
    
    EVALUATION_PROMPT = """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥. 
–û—Ü–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É AI-–±–æ—Ç–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

1. **–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (1-10)**: –ù–∞—Å–∫–æ–ª—å–∫–æ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ AI –ø—Ä–æ–¥–∞–µ—Ç —É—Å–ª—É–≥—É?
2. **–≠–º–ø–∞—Ç–∏—è (1-10)**: –ù–∞—Å–∫–æ–ª—å–∫–æ AI –ø–æ–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–ª–∏–µ–Ω—Ç–∞?
3. **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º (1-10)**: –ù–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∑–≤—É—á–∏—Ç –æ—Ç–≤–µ—Ç?
4. **–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (1-10)**: –ù–∞—Å–∫–æ–ª—å–∫–æ —á–µ—Ç–∫–æ AI –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –∫ –ø–æ–∫—É–ø–∫–µ?
5. **–†–∞—Å—á–µ—Ç ROI (1-10)**: –ù–∞—Å–∫–æ–ª—å–∫–æ —É–±–µ–¥–∏—Ç–µ–ª–µ–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç?

**–î–∏–∞–ª–æ–≥:**

–ö–ª–∏–µ–Ω—Ç: {client_message}

AI-–±–æ—Ç: {ai_response}

**–ö–æ–Ω—Ç–µ–∫—Å—Ç:**
- –¢–∏–ø –¥–µ–ª–∞: {case_type}
- –†–µ–≥–∏–æ–Ω: {region}
- –°—Ç–∞—Ç—É—Å: {status}

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": <–æ—Ü–µ–Ω–∫–∞>,
    "—ç–º–ø–∞—Ç–∏—è": <–æ—Ü–µ–Ω–∫–∞>,
    "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º": <–æ—Ü–µ–Ω–∫–∞>,
    "–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é": <–æ—Ü–µ–Ω–∫–∞>,
    "—Ä–∞—Å—á–µ—Ç_roi": <–æ—Ü–µ–Ω–∫–∞>,
    "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": <—Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞>,
    "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–ø—É–Ω–∫—Ç1", "–ø—É–Ω–∫—Ç2"],
    "—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–ø—É–Ω–∫—Ç1", "–ø—É–Ω–∫—Ç2"],
    "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å"
}}
"""
    
    def __init__(self, deepseek_service):
        self.deepseek = deepseek_service
    
    def evaluate_conversation(self, client_message: str, ai_response: str, 
                            case_type: str, region: str, status: str) -> dict:
        """Evaluate AI conversation quality"""
        import json
        
        prompt = self.EVALUATION_PROMPT.format(
            client_message=client_message,
            ai_response=ai_response,
            case_type=case_type,
            region=region,
            status=status
        )
        
        # Get evaluation from AI
        evaluation_text = self.deepseek.chat_completion(
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        
        # Parse JSON response
        try:
            # Extract JSON from response
            start = evaluation_text.find('{')
            end = evaluation_text.rfind('}') + 1
            json_str = evaluation_text[start:end]
            evaluation = json.loads(json_str)
            return evaluation
        except:
            # Fallback if JSON parsing fails
            return {
                "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 5,
                "—ç–º–ø–∞—Ç–∏—è": 5,
                "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º": 5,
                "–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é": 5,
                "—Ä–∞—Å—á–µ—Ç_roi": 5,
                "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": 5.0,
                "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å"],
                "—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"],
                "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"
            }


@pytest.fixture
def test_lead(db):
    """Create test lead"""
    return Lead.objects.create(
        telegram_id=123456789,
        first_name="–ò–≤–∞–Ω",
        last_name="–ü–µ—Ç—Ä–æ–≤",
        phone_number="+79991234567",
        region="MOSCOW",
        case_type="DUI",
        case_description="—á.1 —Å—Ç.12.8 –ö–æ–ê–ü –†–§ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø—å—è–Ω–µ–Ω–∏—è",
        status="WARM",
        estimated_cost=Decimal('30000')
    )


@pytest.fixture
def mock_deepseek():
    """Mock DeepSeek service"""
    mock = Mock()
    return mock


class TestAISellingSkills:
    """Test AI selling skills with AI evaluator"""
    
    @patch('ai_engine.services.deepseek.DeepSeekAPIService')
    def test_pricing_conversation_quality(self, MockDeepSeek, test_lead, db):
        """Test pricing agent conversation quality"""
        
        # Mock AI responses
        mock_service = MockDeepSeek.return_value
        
        # AI Bot response (what we're testing)
        ai_bot_response = """
üîç <b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:</b>

–°—Ç–∞—Ç—å—è: —á.1 —Å—Ç.12.8 –ö–æ–ê–ü –†–§
–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –±–µ–∑ –∑–∞—â–∏—Ç—ã:
‚Ä¢ –®—Ç—Ä–∞—Ñ: 30,000‚ÇΩ
‚Ä¢ –õ–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤: 1.5-2 –≥–æ–¥–∞
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç–∞–∫—Å–∏: ~540,000‚ÇΩ –∑–∞ 18 –º–µ—Å—è—Ü–µ–≤
‚Ä¢ –†–æ—Å—Ç –û–°–ê–ì–û: +25,000‚ÇΩ

<b>üí∞ –†–∞—Å—á–µ—Ç –≤—ã–≥–æ–¥—ã —Å —é—Ä–∏—Å—Ç–æ–º:</b>

–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã: 30,000‚ÇΩ
–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: 75%
–û–∂–∏–¥–∞–µ–º–∞—è —ç–∫–æ–Ω–æ–º–∏—è: 421,250‚ÇΩ

<b>–ó–∞—â–∏—Ç–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è –≤ 14 —Ä–∞–∑!</b>

–ë–µ—Ä–µ–º –≤–∞—à–µ –¥–µ–ª–æ? –û—Ñ–æ—Ä–º–∏–º –¥–æ–≥–æ–≤–æ—Ä –∑–∞ 5 –º–∏–Ω—É—Ç.
"""
        
        # AI Evaluator response
        evaluator_response = """
{
    "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 9,
    "—ç–º–ø–∞—Ç–∏—è": 8,
    "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º": 9,
    "–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é": 10,
    "—Ä–∞—Å—á–µ—Ç_roi": 10,
    "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": 9.2,
    "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": [
        "–ß–µ—Ç–∫–∏–π —Ä–∞—Å—á–µ—Ç ROI —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏",
        "–°–∏–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (–æ–∫—É–ø–∞–µ—Ç—Å—è –≤ 14 —Ä–∞–∑)",
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏",
        "–ü–æ–∫–∞–∑–∞–Ω—ã –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ç–∞–∫—Å–∏, –û–°–ê–ì–û)"
    ],
    "—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": [
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–æ—Ç–∑—ã–≤—ã)",
        "–ù–µ —É–ø–æ–º—è–Ω—É—Ç—ã —Å—Ä–æ–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    ],
    "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –î–æ–±–∞–≤–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –∏ —Å—Ä–æ–∫–æ–≤."
}
"""
        
        # Setup mock to return both responses
        mock_service.chat_completion.side_effect = [ai_bot_response, evaluator_response]
        
        # Create evaluator
        evaluator = AIEvaluator(mock_service)
        
        # Evaluate conversation
        evaluation = evaluator.evaluate_conversation(
            client_message="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∑–∞—â–∏—Ç–∞ –ø–æ —Å—Ç.12.8?",
            ai_response=ai_bot_response,
            case_type="DUI",
            region="MOSCOW",
            status="WARM"
        )
        
        # Assert quality metrics
        assert evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞'] >= 8.0, "AI selling quality should be high"
        assert evaluation['—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] >= 8, "Should be persuasive"
        assert evaluation['—Ä–∞—Å—á–µ—Ç_roi'] >= 9, "ROI calculation should be strong"
        assert evaluation['–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é'] >= 9, "Call to action should be clear"
        
        print("\n" + "="*80)
        print("AI EVALUATION RESULTS")
        print("="*80)
        print(f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']}/10")
        print(f"–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {evaluation['—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']}/10")
        print(f"–≠–º–ø–∞—Ç–∏—è: {evaluation['—ç–º–ø–∞—Ç–∏—è']}/10")
        print(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º: {evaluation['–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º']}/10")
        print(f"–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: {evaluation['–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é']}/10")
        print(f"–†–∞—Å—á–µ—Ç ROI: {evaluation['—Ä–∞—Å—á–µ—Ç_roi']}/10")
        print("\n–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:")
        for strength in evaluation['—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã']:
            print(f"  ‚úì {strength}")
        print("\n–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:")
        for weakness in evaluation['—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã']:
            print(f"  ‚úó {weakness}")
        print(f"\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {evaluation['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']}")
        print("="*80)
    
    @patch('ai_engine.services.deepseek.DeepSeekAPIService')
    def test_urgency_creation_quality(self, MockDeepSeek, test_lead, db):
        """Test AI's ability to create urgency"""
        
        mock_service = MockDeepSeek.return_value
        
        # AI Bot response for urgent case
        urgent_response = """
‚ö†Ô∏è <b>–°–†–û–ß–ù–û–ï –î–ï–õ–û!</b>

–°—É–¥ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 ‚Äî –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ!

<b>–ß—Ç–æ –¥–µ–ª–∞–µ–º –°–ï–ô–ß–ê–°:</b>
1. –•–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—É–¥–∞ (–≥–æ—Ç–æ–≤–æ –∑–∞ 2 —á–∞—Å–∞)
2. –ë–∞–∑–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è
3. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–∏–Ω–∏–∏ –∑–∞—â–∏—Ç—ã

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: 35,000‚ÇΩ</b>
(–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ 30,000‚ÇΩ + 5,000‚ÇΩ —Å—Ä–æ—á–Ω–æ—Å—Ç—å)

–ë–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—É–¥–∞ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ 1.5-2 –≥–æ–¥–∞!

<b>–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b> –ö–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ —Å—á–µ—Ç—É.
"""
        
        evaluator_response = """
{
    "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 10,
    "—ç–º–ø–∞—Ç–∏—è": 9,
    "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º": 8,
    "–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é": 10,
    "—Ä–∞—Å—á–µ—Ç_roi": 7,
    "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": 8.8,
    "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": [
        "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–°–†–û–ß–ù–û–ï –î–ï–õ–û, –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ —Å—á–µ—Ç—É)",
        "–ß–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏",
        "–ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Ü–µ–Ω–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –Ω–∞—Ü–µ–Ω–∫–∏ –∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å",
        "–°–∏–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
    ],
    "—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": [
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ä–æ—á–Ω–æ–≥–æ –∫–µ–π—Å–∞",
        "ROI —Ä–∞—Å—á–µ—Ç –Ω–µ —Ç–∞–∫–æ–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–µ–ª"
    ],
    "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é! –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å-—Å—Ç–æ—Ä–∏."
}
"""
        
        mock_service.chat_completion.side_effect = [urgent_response, evaluator_response]
        
        evaluator = AIEvaluator(mock_service)
        
        evaluation = evaluator.evaluate_conversation(
            client_message="–°—É–¥ –∑–∞–≤—Ç—Ä–∞! –ü–æ–º–æ–≥–∏—Ç–µ —Å—Ä–æ—á–Ω–æ!",
            ai_response=urgent_response,
            case_type="DUI",
            region="MOSCOW",
            status="HOT"
        )
        
        # Assert urgency handling
        assert evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞'] >= 8.0, "Urgency handling should be excellent"
        assert evaluation['–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é'] >= 9, "Call to action should be urgent"
        assert "—Å—Ä–æ—á–Ω" in urgent_response.lower(), "Should mention urgency"
        
        print("\n" + "="*80)
        print("URGENCY HANDLING EVALUATION")
        print("="*80)
        print(f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']}/10")
        print(f"–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: {evaluation['–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é']}/10")
        print("\n–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:")
        for strength in evaluation['—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã']:
            print(f"  ‚úì {strength}")
        print("="*80)
    
    @patch('ai_engine.services.deepseek.DeepSeekAPIService')
    def test_empathy_and_professionalism(self, MockDeepSeek, test_lead, db):
        """Test AI's empathy and professionalism"""
        
        mock_service = MockDeepSeek.return_value
        
        empathetic_response = """
–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, –ò–≤–∞–Ω. –õ–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤ ‚Äî —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω—ã–π —É–¥–∞—Ä –ø–æ –∂–∏–∑–Ω–∏.

<b>–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:</b>

–í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —á.1 —Å—Ç.12.8 –ö–æ–ê–ü –†–§. –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç –∑–∞—â–∏—Ç—ã –ø–æ —Ç–∞–∫–∏–º –¥–µ–ª–∞–º.

<b>–ß—Ç–æ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
‚Ä¢ 73% –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –ø—Ä–∞–≤–∞
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∑–∞—â–∏—Ç—ã: 2-3 –º–µ—Å—è—Ü–∞
‚Ä¢ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏

<b>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚úì –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚úì –û–ø–ª–∞—Ç–∞ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É (50% —Å–µ–π—á–∞—Å, 50% –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è)
‚úì –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ–º

–ì–æ—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏?
"""
        
        evaluator_response = """
{
    "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 9,
    "—ç–º–ø–∞—Ç–∏—è": 10,
    "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º": 10,
    "–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é": 8,
    "—Ä–∞—Å—á–µ—Ç_roi": 6,
    "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": 8.6,
    "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": [
        "–û—Ç–ª–∏—á–Ω–∞—è —ç–º–ø–∞—Ç–∏—è - –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
        "–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ–ø—ã—Ç, –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (73% —É—Å–ø–µ—Ö–∞)",
        "–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ (–≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥, —Ä–∞—Å—Å—Ä–æ—á–∫–∞)"
    ],
    "—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": [
        "–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ ROI —Ä–∞—Å—á–µ—Ç–∞",
        "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –º—è–≥–∫–∏–π (–º–æ–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å)"
    ],
    "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–û—Ç–ª–∏—á–Ω–∞—è —ç–º–ø–∞—Ç–∏—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º! –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ROI."
}
"""
        
        mock_service.chat_completion.side_effect = [empathetic_response, evaluator_response]
        
        evaluator = AIEvaluator(mock_service)
        
        evaluation = evaluator.evaluate_conversation(
            client_message="–ú–µ–Ω—è –ª–∏—à–∞—é—Ç –ø—Ä–∞–≤, —è –≤ –æ—Ç—á–∞—è–Ω–∏–∏...",
            ai_response=empathetic_response,
            case_type="DUI",
            region="REGIONS",
            status="WARM"
        )
        
        # Assert empathy and professionalism
        assert evaluation['—ç–º–ø–∞—Ç–∏—è'] >= 9, "Should show high empathy"
        assert evaluation['–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º'] >= 9, "Should be professional"
        assert evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞'] >= 8.0, "Overall quality should be high"
        
        print("\n" + "="*80)
        print("EMPATHY & PROFESSIONALISM EVALUATION")
        print("="*80)
        print(f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']}/10")
        print(f"–≠–º–ø–∞—Ç–∏—è: {evaluation['—ç–º–ø–∞—Ç–∏—è']}/10")
        print(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º: {evaluation['–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º']}/10")
        print("\n–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:")
        for strength in evaluation['—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã']:
            print(f"  ‚úì {strength}")
        print("="*80)


class TestConversationFlow:
    """Test complete conversation flows with AI evaluation"""
    
    @patch('ai_engine.services.deepseek.DeepSeekAPIService')
    def test_full_sales_funnel_quality(self, MockDeepSeek, test_lead, db):
        """Test quality of full sales funnel"""
        
        mock_service = MockDeepSeek.return_value
        
        # Simulate 3-step conversation
        conversations = [
            {
                "step": "Intake",
                "client": "–ú–µ–Ω—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—å—è–Ω—ã–º –∑–∞ —Ä—É–ª–µ–º",
                "ai": "üîç –≠—Ç–æ —á.1 —Å—Ç.12.8 –ö–æ–ê–ü –†–§. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è: 30,000‚ÇΩ —à—Ç—Ä–∞—Ñ + –ª–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ 1.5-2 –≥–æ–¥–∞. –®–∞–Ω—Å –∑–∞—â–∏—Ç—ã: 75%. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
            },
            {
                "step": "Pricing",
                "client": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∑–∞—â–∏—Ç–∞?",
                "ai": "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 30,000‚ÇΩ. –ë–µ–∑ –∑–∞—â–∏—Ç—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ 565,000‚ÇΩ (—Ç–∞–∫—Å–∏+–û–°–ê–ì–û). –ó–∞—â–∏—Ç–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è –≤ 14 —Ä–∞–∑. –ë–µ—Ä–µ–º –¥–µ–ª–æ?"
            },
            {
                "step": "Contract",
                "client": "–î–∞, –¥–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º",
                "ai": "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω—É–∂–Ω—ã: –§–ò–û, –ø–∞—Å–ø–æ—Ä—Ç, —Ç–µ–ª–µ—Ñ–æ–Ω. –û–ø–ª–∞—Ç–∞ 50% —Å–µ–π—á–∞—Å, 50% –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è. –ù–∞—á–Ω–µ–º?"
            }
        ]
        
        evaluator = AIEvaluator(mock_service)
        
        # Evaluate each step
        total_score = 0
        for conv in conversations:
            # Mock evaluator response
            mock_service.chat_completion.return_value = """
{
    "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 9,
    "—ç–º–ø–∞—Ç–∏—è": 8,
    "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º": 9,
    "–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é": 9,
    "—Ä–∞—Å—á–µ—Ç_roi": 9,
    "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": 8.8,
    "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–£–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã"],
    "—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤—ã"],
    "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
}
"""
            
            evaluation = evaluator.evaluate_conversation(
                client_message=conv['client'],
                ai_response=conv['ai'],
                case_type="DUI",
                region="MOSCOW",
                status="WARM"
            )
            
            total_score += evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']
            
            print(f"\n{conv['step']}: {evaluation['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']}/10")
        
        avg_score = total_score / len(conversations)
        
        print(f"\n{'='*80}")
        print(f"FULL FUNNEL AVERAGE SCORE: {avg_score:.1f}/10")
        print(f"{'='*80}")
        
        # Assert funnel quality
        assert avg_score >= 8.0, "Full sales funnel should score 8+ on average"


class TestContentFormatting:
    """Test AI content formatting quality"""
    
    def test_html_formatting_quality(self):
        """Test that AI uses proper HTML formatting"""
        
        good_response = """
<b>–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏:</b>
‚Ä¢ –°—Ç–∞—Ç—å—è: —á.1 —Å—Ç.12.8 –ö–æ–ê–ü –†–§
‚Ä¢ –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è: 30,000‚ÇΩ + –ª–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤

<b>–®–∞–Ω—Å—ã:</b> 75%
"""
        
        # Check formatting elements
        assert '<b>' in good_response, "Should use bold tags"
        assert '‚Ä¢' in good_response, "Should use bullet points"
        assert '‚ÇΩ' in good_response, "Should use ruble symbol"
        assert '\n' in good_response, "Should have line breaks"
        
        # Check structure
        lines = good_response.strip().split('\n')
        assert len(lines) >= 3, "Should have multiple lines"
        
        print("\n‚úì HTML formatting quality: PASS")
    
    def test_response_conciseness(self):
        """Test that responses are concise"""
        
        good_response = "–°—Ç–æ–∏–º–æ—Å—Ç—å: 30,000‚ÇΩ. –ó–∞—â–∏—Ç–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è –≤ 14 —Ä–∞–∑. –ë–µ—Ä–µ–º –¥–µ–ª–æ?"
        bad_response = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Ä–∞–¥ —á—Ç–æ –≤—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º. " * 50
        
        assert len(good_response) < 500, "Good response should be concise"
        assert len(bad_response) > 500, "Bad response is too long"
        
        print(f"\n‚úì Good response length: {len(good_response)} chars")
        print(f"‚úó Bad response length: {len(bad_response)} chars")


class TestAIvsAIComparison:
    """Compare different AI responses"""
    
    @patch('ai_engine.services.deepseek.DeepSeekAPIService')
    def test_compare_two_responses(self, MockDeepSeek, test_lead, db):
        """Compare two different AI responses for same query"""
        
        mock_service = MockDeepSeek.return_value
        
        response_a = "–°—Ç–æ–∏–º–æ—Å—Ç—å 30,000‚ÇΩ. –ë–µ—Ä–µ–º –¥–µ–ª–æ?"
        response_b = "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 30,000‚ÇΩ. –ë–µ–∑ –∑–∞—â–∏—Ç—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ 565,000‚ÇΩ. –ó–∞—â–∏—Ç–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è –≤ 14 —Ä–∞–∑! –ë–µ—Ä–µ–º –¥–µ–ª–æ?"
        
        evaluator = AIEvaluator(mock_service)
        
        # Mock evaluations
        mock_service.chat_completion.side_effect = [
            '{"—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 5, "—ç–º–ø–∞—Ç–∏—è": 4, "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º": 6, "–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é": 7, "—Ä–∞—Å—á–µ—Ç_roi": 3, "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": 5.0, "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–ö—Ä–∞—Ç–∫–æ—Å—Ç—å"], "—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–ù–µ—Ç ROI"], "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç"}',
            '{"—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 10, "—ç–º–ø–∞—Ç–∏—è": 8, "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º": 9, "–ø—Ä–∏–∑—ã–≤_–∫_–¥–µ–π—Å—Ç–≤–∏—é": 10, "—Ä–∞—Å—á–µ—Ç_roi": 10, "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": 9.4, "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–û—Ç–ª–∏—á–Ω—ã–π ROI", "–≠–º–æ–¥–∑–∏"], "—Å–ª–∞–±—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["–ù–µ—Ç"], "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–û—Ç–ª–∏—á–Ω–æ"}'
        ]
        
        eval_a = evaluator.evaluate_conversation(
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?", response_a, "DUI", "MOSCOW", "WARM"
        )
        
        eval_b = evaluator.evaluate_conversation(
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?", response_b, "DUI", "MOSCOW", "WARM"
        )
        
        print("\n" + "="*80)
        print("AI vs AI COMPARISON")
        print("="*80)
        print(f"\nResponse A: {eval_a['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']}/10")
        print(f"Response B: {eval_b['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']}/10")
        print(f"\nWinner: Response {'B' if eval_b['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞'] > eval_a['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞'] else 'A'}")
        print(f"Improvement: +{eval_b['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞'] - eval_a['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞']:.1f} points")
        print("="*80)
        
        # Assert B is better
        assert eval_b['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞'] > eval_a['–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞'], "Response B should score higher"
        assert eval_b['—Ä–∞—Å—á–µ—Ç_roi'] > eval_a['—Ä–∞—Å—á–µ—Ç_roi'], "Response B should have better ROI"


if __name__ == '__main__':
    pytest.main([__file__, '-v', '--tb=short', '-s'])
